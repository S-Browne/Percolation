# -*- coding: utf-8 -*-
"""SB2527 Percolation 2-D, Complexity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Ukv6It-WtV7razGvknkaNNb7GpHwqZo

# Complexity
Find the complexity of the system, and plot it
"""

#containers for data
run_times = []
sides = np.linspace(3,25,23)     #side lengths of grid for percolation

#loop to carry out timing
for L in sides:
 i = 0
 timed = []
 while i < 3:
  time_duration = timeit.timeit(f'Canonical_Simulation(10,{[int(L)]},grid_ps_arrays = 100)', setup='from __main__ import Canonical_Simulation', number=1)
  timed.append(time_duration)
  i += 1
 run_times.append(min(timed))

def f(x,a,b):                 #fitting function
  return a*x**b

(a_,b_), delta = scipy.optimize.curve_fit(f,sides**2,run_times)   #curve fitting
delta_a_ = np.sqrt(np.diag(delta))[0]
delta_b_ = np.sqrt(np.diag(delta))[1]

print('Time = a(L^2)^b')                              #display results
print('a = ', a_, '+/-',delta_a_)
print('a = ', b_, '+/-',delta_b_)

#This cell is designed to plot the complexity curve along with the original data
timelinspace = np.linspace(0,max(sides),200)
plt.plot(timelinspace**2,f(timelinspace**2,a_,b_),color = 'black',label = f't = {round(a_,4)}*N^{round(b_,4)}')
plt.plot(sides**2,run_times, color = 'red', label = 'Data', marker = 'x',linewidth = 0)
plt.xlim(0,max(sides**2))
plt.ylim(0,max(run_times))
plt.xlabel('Number of Sites in Square Lattice, N')
plt.ylabel('Time taken for Percolation, t / s')
plt.title('Plot of Time Taken Against Number of Lattice Points for 2-D Grid')
plt.legend()
plt.plot()
plt.savefig('Percolation Fig 4.3.jpg', dpi = 600, format = 'jpg')