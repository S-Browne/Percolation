# -*- coding: utf-8 -*-
"""SB2527 Percolation 1-D, Complexity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C9VDmhK6sa2zEACMR7i6uZQkavG-Wox6

# Complexity
Find the complexity of the system, and plot it
"""

#containers for data
sizes = np.linspace(50,1050,11)     #lengths of chain for percolation
run_times = []

#loop for timing the code
for L in sizes:
 time_duration = timeit.timeit(f'Canonical_Simulation(100,{[L]}, number_of_ps = 100)', setup='from __main__ import Canonical_Simulation', number=20)
 run_times.append(time_duration)

#define fit function
def f(x,a,b):
  return a*x**b

(a_,b_), delta = scipy.optimize.curve_fit(f,sizes,run_times)    #curve fitting
delta_a_ = np.sqrt(np.diag(delta))[0]
delta_b_ = np.sqrt(np.diag(delta))[1]

print('Time = a(L)^b')                              #display results
print('a = ', a_, '+/-',delta_a_)
print('a = ', b_, '+/-',delta_b_)

#This cell plots the it along with the original data
timelinspace = np.linspace(0,max(sizes),200)
plt.plot(timelinspace,f(timelinspace,a_,b_),color = 'black',label = f't = {round(a_,2)}*L^{round(b_,2)}')  #fitted curve
plt.plot(sizes,run_times, color = 'red', label = 'Data', marker = 'x',linewidth = 0)    #raw data
plt.xlim(0,max(sizes))
plt.ylim(0,250)
plt.xlabel('Number of Sites in Chain, L')
plt.ylabel('Time taken for Percolation, t / s')
plt.title('Plot of Time Taken Against Chain Length for 1-D Chain')
plt.legend()
plt.savefig('Percolation Fig 4.1.jpg', dpi = 600, format = 'jpg')
plt.plot()