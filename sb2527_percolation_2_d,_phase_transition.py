# -*- coding: utf-8 -*-
"""SB2527 Percolation 2-D, Phase Transition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15m4Ax5LbY1N094JI1s31th1erDkPYVbL

# Phase Transition
Find the critical values of p using prior data, and plot them
"""

#this is a script that takes the output of the simulation and finds the probability at which a phase transition occurs
#this script find the phase transition for each of the 2-D lattices
k = 0
values = []
while k < len(grid_stats[0]):
 i = 0
 while i < len(grid_stats[0][k]['moments'][2]):
  if min(abs(grid_stats[0][k]['moments'][2])) == abs(grid_stats[0][k]['moments'][2][i]):
   values.append(round(grid_stats[0][k]['ps'][i],4))
  i += 1
 k +=1

#This script plots the phase transition data, and if possible, plots it alongside published results from another paper for comparision
NZ_plot = np.array(values)
MT_original = np.array((0.5000,0.5412,0.5593,0.5697,0.5758,0.5797,0.5823,0.5842,0.5856,0.5867,0.5875,0.5882,0.5887,0.5892,0.5896,0.5899,0.5902,0.5904,0.5906,0.5908))
MT_plot = []
for i in NZ_plot:
 MT_plot.append(MT_original[int(i-1)])
plt.plot(grid_ls, MT_plot, label = 'Mertens')
plt.plot(grid_ls, NZ_plot, label = 'Newmann-Ziff')
if len(MT_plot) == len(NZ_plot):    #this makes sure that there are no plotting erros due to different array lengths
 plt.plot(grid_ls, abs(NZ_plot-MT_plot), label = 'Absolute Difference of Plots')
plt.xlim(2,20)
plt.title('Plot of Estimates of p_c from Newmann-Ziff and Mertens Algorithms')
plt.legend()
plt.savefig('Fig. 5.jpg', dpi = 600, format = 'jpg')
plt.show()